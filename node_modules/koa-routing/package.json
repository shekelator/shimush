{
  "name": "koa-routing",
  "version": "1.2.9",
  "description": "Routing middleware for Koa",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "koa",
    "routing",
    "router"
  ],
  "author": {
    "name": "Ivan Pusic"
  },
  "license": "MIT",
  "dependencies": {
    "methods": "~1.0.0",
    "assert": "~1.1.1",
    "path-to-regexp": "~0.1.2",
    "concat-regexp": "0.0.1",
    "expect": "~0.1.1",
    "koa-compose": "~2.2.0"
  },
  "devDependencies": {
    "koa": "~0.5.2",
    "supertest": "~0.10.0",
    "mocha": "~1.18.2",
    "should": "~3.2.0-beta1"
  },
  "readme": "koa-routing\n================\n[![Build Status](https://travis-ci.org/ivpusic/koa-routing.svg?branch=master)](https://travis-ci.org/ivpusic/koa-routing)\n[![Dependency Status](https://gemnasium.com/ivpusic/koa-routing.svg)](https://gemnasium.com/ivpusic/koa-routing)\n## Installation\n```\nnpm install koa-routing\n```\n\n## Motivation\n\nI wanted to separate my route definitions into multiple files. Also I wanted to make easier to specify route handlers, and execute some methods before some set of routes, for example ensuring that user is authenticated before doing some action. So I developed [koa-r](https://github.com/ivpusic/koa-r) and [koa-routing](https://github.com/ivpusic/koa-routing) to achieve that. Final result is something like this:\n\n**/routing/index.js** file\n```\nmodule.exports = function (app) {\n  require('./users')(app.route('/api/users').before(authenticate));\n};\n```\n\n**/routing/users.js** file\n```\n/**\n * /api/users\n */\n\nmodule.exports = function (route) {\n  /* GET /api/users */\n  route.get(r('user', 'getUsers'));\n\n  /* GET /api/users/logout */\n  route.nested('/logout').get(r('user', 'logout'));\n};\n```\n\nSo here you can see that we are specifying handlers for route with ``r('module', 'method')`` pattern, and we are also following DRY principle when we define our routes.\n\nIf you like this idea, you are on right place.\n\n### Example\n\nLet's define following routes:\n- ``/users`` [GET, POST, PUT],\n- ``/users/list`` [GET, PUT]\n\nWith ``koa-routing`` you can nest routes, and on that way you can follow DRY principle.\nAlso ``koa-routing`` architecture help you to separate route handlers into multiple files. That example will be shown also.\n\n```\nvar koa = require('koa'),\n\trouting = require('koa-routing');\n\nvar app = koa();\napp.use(routing(app));\n\napp.route('/users')\n  .get(function * (next) {\n    this.body = 'from get';\n    yield next;\n  })\n  .post(function * (next) {\n    this.body = 'from post';\n    yield next;\n  })\n  .put(function * (next) {\n    this.body = 'from put';\n    yield next;\n  })\n  .nested('/list')\n    .get(function * (next) {\n      this.body = 'from users list GET';\n      yield next;\n    });\n    .put(function * (next) {\n      this.body = 'from users list PUT';\n      yield next;\n    });\n\napp.listen(4000);\n```\n**You should put ``koa-routing`` middleware after body parsers and simmilar middlewares which are preparing request for you, or passing an options object with a ``defer`` field setted to ``true``**.\n\nAs you can see, you can pass classic ``express`` route style, such as ``/user/:id``, and after that you can read received values from ``this.request.params`` object.\n\nYou can pass also regex as route path.\n\n## API\n\n#### route\n``koa-routing`` extends you application instance with ``route`` method.\nYou can use that method for defining route path.\n\n```\napp.route('/users/:id');\n```\n\n#### HTTP methods\n\nAfter you define your route, you need set ``HTTP`` methods for that route.\nIn following example you need to replace ``someHTTPmethod`` with one of supported\n``node`` ``HTTP`` methods. That can be ``GET``, ``POST``, ``PUT``, etc...\n\n```\napp.route('route path').someHTTPmethod(handler);\n```\n\nSo you can type something like:\n```\nvar handler = function * () {\n  yield next;\n};\n\napp.route('api/users').get(handler);\n```\n\nKeep in mind that every call returns router instance, so everything can be chained.\n\n#### nested\n\nLet's we say that you have for routes something like this:\n- ``/api/users/profile/data``\n- ``/api/users/profile/image``\n- etc.\n\nYou see that you are repeating ``/api/users/profile`` for every route, and we don't want to do that.\n``koa-routing`` have nice solution for this with ``nested`` function.\n\n```\n// first you type fixed part\nvar route = app.route('/api/users/profile');\n\nroute.nested('/data')\n  .get(function * (next) { yield next; });\n  // here you can also define other HTTP operations, like POST, PUT, etc\n  // example of put...\n  .put(function * (next) { yield next; });\n\nroute.nested('/image')\n  .get(function * (next) { yield next; });\n```\n\nKeep in mind that nested creates new route for you and returns created route. You can continue nesting routes. It is up to you.\n\n#### before\n\nYou can define function which will be executed before each route method, and before all nested routes.\n```\napp.route('/someRoute')\n\t.before(function * (next) {\n\t\tthis.status = 300;\n\t})\n\t.get(function * (next) {\n\t\tthis.body = 'should not be here';\n\t\tthis.status = 200;\n\t\tyield next;\n\t});\n```\n\n#### all\n\nThis function will be executed if there is no matching HTTP method.\n```\napp.route('/someRoute')\n\t.all(function * (next) {\n\t\tthis.body = 'will catch GET/POST/PUT... etc';\n\t\tthis.status = 200;\n\t\tyield next;\n\t})\n```\n\n## Other features\n\n#### Multiple middlewares\n\nWith ``koa-routing`` you can provide multiple middlewares for each route method:\n```\napp.route('/multipleMiddleware')\n\t.get(function * (next) {\n\t\tthis.body = '1';\n\t\tthis.status = 200;\n\t\tyield next;\n\t}, function * (next) {\n\t\tthis.body = '2';\n\t\tyield next;\n\t});\n```\n\nIf you go to this route you will receive ``2`` as a result, because request will be passed\nto each defined handler.\n\n#### Options\n\n```\napp.use(routing(app,options));\n```\n\n* ``defer`` Default is false. If true, serves after yield next, allowing any downstream middleware to respond first.\n\n## Contributing\n\nFeel free to send pull request with some new awesome feature or some bug fix.\nBut please provide some tests with your contribution.\n\n# License\n**MIT**\n",
  "readmeFilename": "README.md",
  "_id": "koa-routing@1.2.9",
  "_shasum": "d295af6d730a36dcfeb9b67b6f2ba2c889972234",
  "_from": "koa-routing@",
  "_resolved": "https://registry.npmjs.org/koa-routing/-/koa-routing-1.2.9.tgz"
}
